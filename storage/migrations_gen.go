// Code generated by go-bindata.
// sources:
// ../migrate/001_create_device.sql
// ../migrate/004_create_user.sql
// DO NOT EDIT!

package storage

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __001_create_deviceSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8f\x3d\x4e\xc4\x40\x0c\x46\xfb\x39\xc5\x27\x9a\xdd\x15\x44\xa2\xa1\x4a\xcb\x15\xa8\x23\x67\xc6\x24\x16\xf3\x27\xe3\x49\x34\x9c\x1e\x91\x50\x40\xb5\xdd\xb3\xf4\xac\x4f\x6f\x18\xf0\x98\x64\x51\x32\xc6\x5b\x75\x5e\xf9\x87\x8c\xe6\xc8\x08\xbc\x89\xe7\xab\x03\xf0\xcb\x13\x37\xc1\xdc\x8d\x09\x55\x25\x91\x76\x7c\x70\x7f\x3a\x8c\xaa\xc5\x8a\x2f\x71\xb2\x5e\x19\x1b\xa9\x5f\x49\xaf\x2f\xcf\x37\xe4\x62\xc8\x2d\x46\x04\x7e\xa7\x16\x0d\x97\x20\x8b\x18\xc5\x87\xcb\xf9\x7a\xae\x86\x89\x0c\x26\x89\x3f\x8d\x52\xc5\x2e\xb6\x1e\x27\xbe\x4a\xe6\x53\x6c\x35\xdc\x13\xdd\x6d\x74\xee\x6f\xd5\x6b\xd9\xb3\x0b\x5a\xea\xbf\xaa\xf1\x3b\x00\x00\xff\xff\x5e\x56\x85\x70\xf9\x00\x00\x00")

func _001_create_deviceSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_create_deviceSql,
		"001_create_device.sql",
	)
}

func _001_create_deviceSql() (*asset, error) {
	bytes, err := _001_create_deviceSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_create_device.sql", size: 249, mode: os.FileMode(436), modTime: time.Unix(1556088144, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __004_create_userSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8f\x4f\x6b\x83\x40\x10\x47\xef\xfb\x29\xe6\x10\x50\xa9\x01\xe3\x21\x21\x78\x6b\x42\xff\xa0\xa7\xd2\x50\xe8\x25\x4c\xdd\x69\x5d\xe2\xce\x6e\x66\x57\x25\xfd\xf4\xa5\xa1\x04\x7b\xfb\x5d\xde\xef\xf1\x96\x4b\xb8\xb3\xe6\x4b\x30\x12\x1c\xbc\x6a\x85\x7e\x57\xc4\x8f\x9e\x60\x08\x24\x21\x55\x00\x70\x9d\x47\x46\x4b\x30\xa2\xb4\x1d\x4a\xba\x2a\x8a\x0c\xd8\x45\xe0\xa1\xef\xc1\x8b\xb1\x28\x17\x38\xd1\x25\xbf\x02\x1e\x43\x98\x9c\xe8\x63\x87\xa1\xbb\x41\xe5\x1c\x52\x59\xa5\x94\xe1\x40\x12\xc1\x70\x74\x7f\xbe\x9b\x2a\xff\xf7\x91\xa9\x11\xfb\x81\x42\x9a\xa0\xb6\x86\x93\x3c\x59\x94\xb8\x58\x15\x8b\x76\xd7\x3c\xea\x76\x2b\x96\xa7\xd7\x53\xad\xe9\x65\xdd\xf8\x27\x62\x73\xf6\xe5\xfb\xf8\xbc\x3d\xaf\x3f\xdf\x76\x9b\x66\x8f\xf5\xe1\x7b\xa3\x1f\x5a\x96\xfa\x5e\x9b\x24\xab\xd4\x3c\x7d\xef\x26\x56\x5a\x9c\x9f\xa7\x57\x3f\x01\x00\x00\xff\xff\x1a\x97\x0b\x3d\x1d\x01\x00\x00")

func _004_create_userSqlBytes() ([]byte, error) {
	return bindataRead(
		__004_create_userSql,
		"004_create_user.sql",
	)
}

func _004_create_userSql() (*asset, error) {
	bytes, err := _004_create_userSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "004_create_user.sql", size: 285, mode: os.FileMode(436), modTime: time.Unix(1554809269, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"001_create_device.sql": _001_create_deviceSql,
	"004_create_user.sql": _004_create_userSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"001_create_device.sql": &bintree{_001_create_deviceSql, map[string]*bintree{}},
	"004_create_user.sql": &bintree{_004_create_userSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

