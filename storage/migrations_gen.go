// Code generated by go-bindata.
// sources:
// ../migrate/001_create_device.sql
// ../migrate/002_create_track.sql
// ../migrate/003_create_state.sql
// ../migrate/004_create_user.sql
// DO NOT EDIT!

package storage

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __001_create_deviceSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8f\xbd\x6e\x84\x30\x10\x84\x7b\x3f\xc5\x74\x80\x02\x12\x49\x4b\x9b\x57\x48\x8d\x16\x7b\x13\xac\xf8\x4f\xce\x1a\x44\x9e\xfe\x04\x9c\x4e\x5c\x75\xdd\xac\xe6\xd3\x6a\xbe\xae\xc3\x9b\xb7\x3f\x99\x84\xf1\x95\x94\xce\xbc\x27\xa1\xc9\x31\x0c\x2f\x56\x73\xad\x00\xdc\xf3\xc8\xc5\x62\xda\x84\x09\x29\x5b\x4f\x79\xc3\x2f\x6f\xed\x95\x08\xe4\x19\x0b\x65\x3d\x53\xae\x3f\xfa\xbe\x41\x88\x82\x50\x9c\x3b\x31\xab\x63\x78\xf4\xef\x7b\x6f\xf8\x9b\x8a\x13\x54\x55\x8b\x03\x39\x47\x98\x91\x04\x62\x3d\xff\x09\xf9\x84\xd5\xca\x7c\x9c\xf8\x8f\x81\xcf\x5f\x25\x99\x57\xa0\x6a\x06\xa5\xae\x92\x9f\x71\x0d\xca\xe4\x98\x9e\x24\x87\x5b\x00\x00\x00\xff\xff\xa8\xa7\xe1\x6e\x08\x01\x00\x00")

func _001_create_deviceSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_create_deviceSql,
		"001_create_device.sql",
	)
}

func _001_create_deviceSql() (*asset, error) {
	bytes, err := _001_create_deviceSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_create_device.sql", size: 264, mode: os.FileMode(436), modTime: time.Unix(1554809269, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __002_create_trackSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\x4d\x4e\xc4\x30\x0c\x85\xf7\x39\xc5\x5b\x32\x62\xe6\x04\xd9\x72\x05\xd6\x95\x27\xb1\x8a\x45\x6a\x47\xc1\xa5\x85\xd3\x23\x5a\xf5\x07\x10\x3b\xdb\x9f\x9e\xf5\xe9\xdd\x6e\x78\x1c\xa4\x6f\xe4\x8c\xe7\x1a\x52\xe3\xef\xc9\xe9\x5e\x18\x99\xdf\x25\x71\xe7\x8d\xd2\xeb\x43\x00\xb0\x5d\x78\x14\xdc\x3f\x9c\x09\x6a\x0e\x1d\x4b\xc1\x75\xe1\x6b\x3c\x77\xe4\x70\x19\xf8\xcd\x69\xa8\x98\xc4\x5f\x96\x15\x9f\xa6\xbc\x47\xd6\x44\xb1\x44\x2e\xa6\xa8\x26\xea\xbf\x20\x15\x17\x1f\x33\x43\xd4\xb9\xe7\xb6\xe3\x70\x89\x61\x73\x15\xcd\x3c\x43\xf2\xdc\x9d\x7d\x61\xfa\xd3\xff\x50\xbf\x1e\x96\x97\x18\xce\x05\x3c\xd9\xa4\x21\x37\xab\xff\x3c\x8d\x2b\xfc\xdb\x4e\xfc\x0a\x00\x00\xff\xff\x07\xd8\x3f\xb5\x47\x01\x00\x00")

func _002_create_trackSqlBytes() ([]byte, error) {
	return bindataRead(
		__002_create_trackSql,
		"002_create_track.sql",
	)
}

func _002_create_trackSql() (*asset, error) {
	bytes, err := _002_create_trackSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "002_create_track.sql", size: 327, mode: os.FileMode(436), modTime: time.Unix(1554809269, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __003_create_stateSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\xc1\x0e\x82\x40\x10\x43\xef\xfb\x15\x3d\x6a\x84\x2f\xe0\xea\x2f\x78\x26\x03\x4c\x74\x74\x77\x66\xb3\x3b\x48\xf0\xeb\x8d\x04\x13\x0f\xde\xda\xa6\x4d\x5f\xdb\xe2\x94\xe4\x5a\xc8\x19\x97\x1c\xc6\xc2\x1f\xe5\x34\x44\xc6\xc4\x4f\x19\xb9\xaf\x4e\xce\x87\x00\xe0\x9b\xf0\x2c\x18\x56\x67\x42\x2e\x92\xa8\xac\x78\xf0\xda\x6c\x8d\x48\xd5\xfb\xca\xac\x3d\x39\x5c\x12\x57\xa7\x94\xb1\x88\xdf\x36\x8b\x97\x29\x43\xcd\xa1\x73\x8c\xfb\xc6\x46\x72\x31\x45\x36\x51\x6f\xf6\x27\x27\x89\xb8\x57\xd3\x70\xec\x42\xf8\xe5\x3c\xdb\xa2\x61\x2a\x96\xff\x70\x76\xef\x00\x00\x00\xff\xff\xe0\xc9\xc5\x66\xd1\x00\x00\x00")

func _003_create_stateSqlBytes() ([]byte, error) {
	return bindataRead(
		__003_create_stateSql,
		"003_create_state.sql",
	)
}

func _003_create_stateSql() (*asset, error) {
	bytes, err := _003_create_stateSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "003_create_state.sql", size: 209, mode: os.FileMode(436), modTime: time.Unix(1554809269, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __004_create_userSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8f\x4f\x6b\x83\x40\x10\x47\xef\xfb\x29\xe6\x10\x50\xa9\x01\xe3\x21\x21\x78\x6b\x42\xff\xa0\xa7\xd2\x50\xe8\x25\x4c\xdd\x69\x5d\xe2\xce\x6e\x66\x57\x25\xfd\xf4\xa5\xa1\x04\x7b\xfb\x5d\xde\xef\xf1\x96\x4b\xb8\xb3\xe6\x4b\x30\x12\x1c\xbc\x6a\x85\x7e\x57\xc4\x8f\x9e\x60\x08\x24\x21\x55\x00\x70\x9d\x47\x46\x4b\x30\xa2\xb4\x1d\x4a\xba\x2a\x8a\x0c\xd8\x45\xe0\xa1\xef\xc1\x8b\xb1\x28\x17\x38\xd1\x25\xbf\x02\x1e\x43\x98\x9c\xe8\x63\x87\xa1\xbb\x41\xe5\x1c\x52\x59\xa5\x94\xe1\x40\x12\xc1\x70\x74\x7f\xbe\x9b\x2a\xff\xf7\x91\xa9\x11\xfb\x81\x42\x9a\xa0\xb6\x86\x93\x3c\x59\x94\xb8\x58\x15\x8b\x76\xd7\x3c\xea\x76\x2b\x96\xa7\xd7\x53\xad\xe9\x65\xdd\xf8\x27\x62\x73\xf6\xe5\xfb\xf8\xbc\x3d\xaf\x3f\xdf\x76\x9b\x66\x8f\xf5\xe1\x7b\xa3\x1f\x5a\x96\xfa\x5e\x9b\x24\xab\xd4\x3c\x7d\xef\x26\x56\x5a\x9c\x9f\xa7\x57\x3f\x01\x00\x00\xff\xff\x1a\x97\x0b\x3d\x1d\x01\x00\x00")

func _004_create_userSqlBytes() ([]byte, error) {
	return bindataRead(
		__004_create_userSql,
		"004_create_user.sql",
	)
}

func _004_create_userSql() (*asset, error) {
	bytes, err := _004_create_userSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "004_create_user.sql", size: 285, mode: os.FileMode(436), modTime: time.Unix(1554809269, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"001_create_device.sql": _001_create_deviceSql,
	"002_create_track.sql": _002_create_trackSql,
	"003_create_state.sql": _003_create_stateSql,
	"004_create_user.sql": _004_create_userSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"001_create_device.sql": &bintree{_001_create_deviceSql, map[string]*bintree{}},
	"002_create_track.sql": &bintree{_002_create_trackSql, map[string]*bintree{}},
	"003_create_state.sql": &bintree{_003_create_stateSql, map[string]*bintree{}},
	"004_create_user.sql": &bintree{_004_create_userSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

