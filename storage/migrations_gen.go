// Code generated by go-bindata.
// sources:
// ../migrate/001_create_device.sql
// ../migrate/002_create_track.sql
// ../migrate/003_create_state.sql
// ../migrate/004_create_user.sql
// DO NOT EDIT!

package storage

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __001_create_deviceSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\xcf\xcd\x6a\x85\x30\x10\x05\xe0\x7d\x20\xef\x70\x76\xf7\x4a\x15\x6c\xb7\x6e\xfb\x0a\x5d\xcb\x98\x4c\x6b\x68\xfe\x48\x27\x8a\x7d\xfa\x62\x95\x52\x57\x77\x37\x07\x3e\x86\x73\xba\x0e\x4f\xc1\x7d\x14\x12\xc6\x5b\xd6\xca\x14\xde\x4f\xa1\xc9\x33\x2c\x2f\xce\xf0\x5d\x2b\x00\x67\x18\xb9\x3a\x4c\x9b\x30\x21\x17\x17\xa8\x6c\xf8\xe4\xad\xbd\x90\x48\x81\xb1\x50\x31\x33\x95\xfb\x4b\xdf\x37\x88\x49\x10\xab\xf7\xa7\x73\x26\xc5\x3f\xf0\xbc\x03\xcb\xef\x54\xbd\xe0\x76\x6b\x71\x98\xa3\x88\x1d\x49\x20\x2e\xf0\x97\x50\xc8\x58\x9d\xcc\xbf\x11\xdf\x29\xf2\xf9\xad\x66\xfb\x48\x6a\xd5\x0c\x5a\x69\xf5\x7f\xed\x6b\x5a\xa3\x56\xb6\xa4\x7c\x59\x3b\xfc\x04\x00\x00\xff\xff\x5c\x04\x67\xe0\x12\x01\x00\x00")

func _001_create_deviceSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_create_deviceSql,
		"001_create_device.sql",
	)
}

func _001_create_deviceSql() (*asset, error) {
	bytes, err := _001_create_deviceSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_create_device.sql", size: 274, mode: os.FileMode(438), modTime: time.Unix(1554706552, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __002_create_trackSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x50\x41\x4e\xc4\x30\x0c\xbc\x47\xca\x1f\xe6\x08\x62\xf7\x05\xbd\xf2\x05\xce\x95\x37\xb1\x16\x8b\xd4\x8e\x82\xcb\x16\x5e\x8f\x4a\x4b\x5b\x40\xdc\x6c\x8f\x67\x34\x33\xe7\x33\x1e\x06\xb9\x36\x72\xc6\x53\x8d\x21\x35\x9e\x47\xa7\x4b\x61\x64\x7e\x93\xc4\xbd\x37\x4a\x2f\x77\x31\x00\xf8\x3e\xf1\x28\xb8\xbc\x3b\x13\xd4\x1c\x3a\x96\x82\xd3\xf2\xb0\x08\xe4\x9e\x1c\x2e\x03\xbf\x3a\x0d\x15\x37\xf1\xe7\xaf\x15\x1f\xa6\xbc\x71\x56\x4a\xb1\x44\x2e\xa6\xa8\x26\xea\xbf\x51\x2a\x2e\x3e\x66\x86\xa8\xf3\x95\xdb\x86\xc7\x70\xdf\xc5\xb0\x59\x16\xcd\x3c\x41\xf2\xd4\x1f\x6d\xc3\xf4\x67\x8c\x3d\xc0\x69\xb7\x3a\x0b\x1d\x9b\x78\xb4\x9b\xc6\x90\x9b\xd5\x7f\x64\xbb\x15\xfd\xdb\x53\xf7\x19\x00\x00\xff\xff\x8a\x7a\xe1\xf6\x52\x01\x00\x00")

func _002_create_trackSqlBytes() ([]byte, error) {
	return bindataRead(
		__002_create_trackSql,
		"002_create_track.sql",
	)
}

func _002_create_trackSql() (*asset, error) {
	bytes, err := _002_create_trackSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "002_create_track.sql", size: 338, mode: os.FileMode(438), modTime: time.Unix(1554780451, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __003_create_stateSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\xc1\x8a\xc3\x30\x10\x43\xef\x06\xff\x83\x8e\xbb\x6c\xf2\x05\xb9\xee\x2f\xec\x39\x4c\x92\x61\x3b\xad\x3d\x63\xec\x49\x43\xfa\xf5\xa5\x2d\x81\x1e\x7a\x93\x84\x84\x5e\xdf\xe3\x27\xcb\x7f\x25\x67\xfc\x95\x18\xe6\xca\x0f\xe9\x34\x25\xc6\xc2\x57\x99\x79\x6c\x4e\xce\x5f\x31\x00\x38\x22\x5e\x05\xd3\xee\x4c\x28\x55\x32\xd5\x1d\x17\xde\xbb\x57\x25\x51\xf3\xb1\x31\xeb\x48\x0e\x97\xcc\xcd\x29\x17\x6c\xe2\xa7\xa7\xc5\xcd\x94\xa1\xe6\xd0\x35\xa5\x63\x64\x33\xb9\x98\xa2\x98\xa8\x77\xc7\x99\x93\x24\x9c\x9b\x69\x0c\xdf\x43\x0c\x31\xbc\xf3\xfe\xda\xa6\x31\x2c\xd5\xca\x07\xde\xe1\x1e\x00\x00\xff\xff\x0e\x43\x13\xcc\xda\x00\x00\x00")

func _003_create_stateSqlBytes() ([]byte, error) {
	return bindataRead(
		__003_create_stateSql,
		"003_create_state.sql",
	)
}

func _003_create_stateSql() (*asset, error) {
	bytes, err := _003_create_stateSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "003_create_state.sql", size: 218, mode: os.FileMode(438), modTime: time.Unix(1554706574, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __004_create_userSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\x4d\x6b\xb3\x40\x14\x46\xf7\x03\xf3\x1f\xee\x42\x50\x79\x0d\x18\x17\x09\x21\xbb\x37\xa1\x1f\xe8\xaa\x34\x14\xba\x09\xb7\xce\x6d\x1d\xa2\xd7\xc9\x9d\x51\x49\x7f\x7d\x49\x5b\x82\xdd\x3d\x9b\xf3\x1c\x38\x8b\x05\xfc\xeb\xec\x87\x60\x20\x38\x38\xad\x6a\xa1\xeb\x0c\xf8\xd6\x12\x0c\x9e\xc4\x27\x5a\x01\xc0\xf7\x3e\x32\x76\x04\x23\x4a\xdd\xa0\x24\xcb\x3c\x4f\x81\xfb\x00\x3c\xb4\x2d\x38\xb1\x1d\xca\x05\x4e\x74\xc9\x7e\x08\x87\xde\x4f\xbd\x98\x63\x83\xbe\xb9\x51\xc5\x9c\xd2\x2a\xdd\x6a\xa5\x95\x65\x4f\x12\xc0\x72\xe8\x7f\xa5\x37\x5d\xf6\xe7\x26\xd5\x6a\xc4\x76\x20\x9f\xc4\x68\x3a\xcb\x71\x16\x47\x05\x46\xcb\x3c\xaa\x77\xd5\xbd\xa9\x37\xd2\xf1\xf4\x7c\x2a\x0d\x3d\xad\x2a\xf7\x40\x6c\xcf\xae\x78\x1d\x1f\x37\xe7\xd5\xfb\xcb\x6e\x5d\xed\xb1\x3c\x7c\xae\xcd\x5d\xcd\x52\xfe\x37\x36\xbe\xea\xe7\x09\xf6\xfd\xc4\x5a\x19\xe9\xdd\x3c\xc1\xf6\x2b\x00\x00\xff\xff\xaf\xdd\xbf\x26\x26\x01\x00\x00")

func _004_create_userSqlBytes() ([]byte, error) {
	return bindataRead(
		__004_create_userSql,
		"004_create_user.sql",
	)
}

func _004_create_userSql() (*asset, error) {
	bytes, err := _004_create_userSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "004_create_user.sql", size: 294, mode: os.FileMode(438), modTime: time.Unix(1554805269, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"001_create_device.sql": _001_create_deviceSql,
	"002_create_track.sql": _002_create_trackSql,
	"003_create_state.sql": _003_create_stateSql,
	"004_create_user.sql": _004_create_userSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"001_create_device.sql": &bintree{_001_create_deviceSql, map[string]*bintree{}},
	"002_create_track.sql": &bintree{_002_create_trackSql, map[string]*bintree{}},
	"003_create_state.sql": &bintree{_003_create_stateSql, map[string]*bintree{}},
	"004_create_user.sql": &bintree{_004_create_userSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

